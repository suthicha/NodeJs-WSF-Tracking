{"version":3,"sources":["../src/index.js"],"names":["express","require","cors","app","bodyParser","jwt","settings","httpMsg","user","order","shipment","set","secert","use","urlencoded","extended","json","get","req","resp","send","webPort","apiRoute","Router","post","authenticate","next","token","body","param","headers","verify","err","decoded","success","message","status","getList","add","put","update","delete","params","orderno","taxno","checkExists","hasRecord","showHome","listen","console","log"],"mappings":"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","file":"index.js","sourcesContent":["var express = require('express');\nvar cors = require('cors');\nvar app = express();\nvar bodyParser = require('body-parser');\nvar jwt = require('jsonwebtoken');\n\nvar settings = require('./settings');\nvar httpMsg = require('./core/httpMsg');\nvar user = require('./controller/user');\nvar order = require('./controller/order');\nvar shipment = require('./controller/shipment');\n\napp.set('secert', settings.secert);\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n// basic route (http://localhost:<port>)\napp.get('/', function(req, resp) {\n    resp.send('The API is at the http://localhost:' + settings.webPort + '/api');\n});\n\nvar apiRoute = express.Router();\napiRoute.post('/authenticate', function(req, resp) {   \n    user.authenticate(req, resp);\n});\n\n\n// ---------------------------------------------------------\n// route middleware to authenticate and check token\n// ---------------------------------------------------------\napiRoute.use(function(req, resp, next) {\n\n    var token = req.body.token || req.param('token') || req.headers['x-access-token'];\n\n    if (token){\n        // verifies secret and checks exp\n\t\tjwt.verify(token, app.get('secert'), function(err, decoded) {\t\t\t\n\t\t\tif (err) {\n\t\t\t\treturn resp.json({ success: false, message: 'Failed to authenticate token.' });\t\t\n\t\t\t} else {\n\t\t\t\t// if everything is good, save to request for use in other routes\n\t\t\t\treq.decoded = decoded;\t\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n    }\n    else {\n        // if there is no token\n\t\t// return an error\n\t\treturn resp.status(403).send({ \n\t\t\tsuccess: false, \n\t\t\tmessage: 'No token provided.'\n\t\t});\n    }\n});\n\n// ---------------------------------------------------------\n// route middleware to user api.\n// ---------------------------------------------------------\napiRoute.get('/user', function(req, resp) {\n\tuser.getList(req, resp);\n})\n\napiRoute.post('/user', function(req, resp) {\n\tuser.add(req, resp);\n})\n\napiRoute.put('/user', function(req, resp) {\n\tuser.update(req, resp);\n})\n\napiRoute.delete('/user', function(req, resp) {\n\tuser.delete(req, resp);\n})\n\n// ---------------------------------------------------------\n// route middleware to order api.\n// ---------------------------------------------------------\napiRoute.get('/order/:orderno', function(req, resp) {\n\torder.get(req, resp,req.params.orderno);\n})\n\n\n// ---------------------------------------------------------\n// route middleware to shipment api.\n// ---------------------------------------------------------\napiRoute.get('/shipment/:taxno/:orderno', function(req, resp) {\n\tshipment.get(req, resp, req.params.taxno, req.params.orderno);\n})\n\napiRoute.post('/shipment', function(req, resp) {\n\n\tshipment.checkExists(req, resp, function(hasRecord) {\n\t\tif (hasRecord)\n\t\t\tshipment.update(req, resp);\n\t\telse\n\t\t\tshipment.add(req, resp);\t\n\t})\n})\n\napiRoute.put('/shipment', function(req, resp) {\n\tshipment.update(req, resp);\n})\n\napiRoute.delete('/shipment', function(req, resp) {\n\tshipment.delete(req, resp);\n})\n\napiRoute.get('/', function(req, resp) {\n    httpMsg.showHome(req, resp);\n});\n\napp.use('/api', apiRoute);\napp.listen(settings.webPort);\nconsole.log('Service started at http://localhost:' + settings.webPort);\n\n"]}